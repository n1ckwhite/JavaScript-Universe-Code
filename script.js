class CodePlayground {
    constructor() {
        this.editor = null;
        this.outputElement = document.getElementById('output');
        this.runBtn = document.getElementById('runBtn');
        this.clearBtn = document.getElementById('clearBtn');
        this.clearOutputBtn = document.getElementById('clearOutputBtn');
        this.autoRunToggle = document.getElementById('autoRunToggle');
        
        this.autoRunTimeout = null;
        this.autoRunDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
        
        this.initializeEditor();
        this.bindEvents();
        this.loadDefaultCode();
        this.setupMobileOptimizations();
    }

    setupMobileOptimizations() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –∑—É–º–∞
        let lastTouchEnd = 0;
        document.addEventListener('touchend', (event) => {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if (window.innerWidth <= 768) {
            this.setupMobileEditor();
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                this.editor.refresh();
            }, 100);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            setTimeout(() => {
                this.editor.refresh();
            }, 100);
        });
    }

    setupMobileEditor() {
        // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∞–≤—Ç–æ-–∑–∞–ø—É—Å–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        this.autoRunDelay = 1000;
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º CodeMirror –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        this.editor.setOption('lineWrapping', true);
        this.editor.setOption('scrollbarStyle', 'native');
        
        // –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Å–∞–Ω–∏–π
        this.editor.on('touchstart', () => {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∂–µ—Å—Ç–∞–º–∏
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
        if (window.innerWidth <= 480) {
            this.setupTinyScreenOptimizations();
        }
    }

    setupTinyScreenOptimizations() {
        // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤
        this.editor.setOption('lineHeight', 1.1);
        
        // –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        const editorElement = this.editor.getWrapperElement();
        editorElement.style.fontSize = '10px';
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è –∫–∞—Å–∞–Ω–∏–π
        this.editor.setOption('cursorBlinkRate', 0); // –û—Ç–∫–ª—é—á–∞–µ–º –º–∏–≥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∞–≤—Ç–æ-–∑–∞–ø—É—Å–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
        this.autoRunDelay = 800;
    }

    initializeEditor() {
        const textarea = document.getElementById('codeEditor');
        
        this.editor = CodeMirror.fromTextArea(textarea, {
            mode: 'text/typescript',
            theme: 'monokai',
            lineNumbers: true,
            autoCloseBrackets: true,
            matchBrackets: true,
            indentUnit: 2,
            tabSize: 2,
            lineWrapping: true,
            foldGutter: true,
            gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],
            styleActiveLine: true,
            extraKeys: {
                'Ctrl-Enter': () => this.runCode(),
                'Cmd-Enter': () => this.runCode()
            }
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        setTimeout(() => {
            this.editor.refresh();
        }, 100);
    }

    bindEvents() {
        this.runBtn.addEventListener('click', () => this.runCode());
        this.clearBtn.addEventListener('click', () => this.clearEditor());
        this.clearOutputBtn.addEventListener('click', () => this.clearOutput());
        this.autoRunToggle.addEventListener('change', (e) => {
            if (!e.target.checked) {
                this.clearAutoRunTimeout();
            }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞
        this.editor.on('change', (cm, change) => {
            this.scheduleAutoRun();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', (e) => {
            this.logError(e.error || e.message);
        });
    }

    scheduleAutoRun() {
        if (!this.autoRunToggle.checked) return;
        
        this.clearAutoRunTimeout();
        this.autoRunTimeout = setTimeout(() => {
            this.runCode();
        }, this.autoRunDelay);
    }

    clearAutoRunTimeout() {
        if (this.autoRunTimeout) {
            clearTimeout(this.autoRunTimeout);
            this.autoRunTimeout = null;
        }
    }

    async runCode() {
        this.clearOutput();
        const code = this.editor.getValue();
        
        if (!code.trim()) {
            this.logInfo('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.showLoading();

        try {
            await this.runTypeScript(code);
        } catch (error) {
            this.logError(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
        } finally {
            this.hideLoading();
        }
    }

    async runTypeScript(code) {
        try {
            // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º TypeScript –≤ JavaScript
            const result = ts.transpileModule(code, {
                compilerOptions: {
                    target: ts.ScriptTarget.ES2020,
                    module: ts.ModuleKind.None,
                    strict: true,
                    esModuleInterop: true,
                    skipLibCheck: true
                }
            });

            if (result.diagnostics && result.diagnostics.length > 0) {
                this.logErrorHeader('üîç TypeScript –æ—à–∏–±–∫–∏:');
                result.diagnostics.forEach(diagnostic => {
                    const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                    const line = diagnostic.file ? diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start).line + 1 : '?';
                    const character = diagnostic.file ? diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start).character + 1 : '?';
                    
                    this.logErrorLocation(`üìç –°—Ç—Ä–æ–∫–∞ ${line}, —Å–∏–º–≤–æ–ª ${character}: ${message}`);
                });
                return;
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript
            await this.executeCode(result.outputText, 'TypeScript');
            
        } catch (error) {
            this.logError(`–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript: ${error.message}`);
        }
    }

    async executeCode(code, language) {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console –º–µ—Ç–æ–¥—ã
        const originalConsole = {
            log: console.log,
            error: console.error,
            warn: console.warn,
            info: console.info
        };

        const logs = [];

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console –º–µ—Ç–æ–¥—ã
        console.log = (...args) => {
            logs.push({ type: 'log', args });
            originalConsole.log(...args);
        };

        console.error = (...args) => {
            logs.push({ type: 'error', args });
            originalConsole.error(...args);
        };

        console.warn = (...args) => {
            logs.push({ type: 'warn', args });
            originalConsole.warn(...args);
        };

        console.info = (...args) => {
            logs.push({ type: 'info', args });
            originalConsole.info(...args);
        };

        try {
            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            const sandbox = {
                console: console,
                setTimeout: setTimeout,
                setInterval: setInterval,
                clearTimeout: clearTimeout,
                clearInterval: clearInterval,
                Math: Math,
                Date: Date,
                Array: Array,
                Object: Object,
                String: String,
                Number: Number,
                Boolean: Boolean,
                RegExp: RegExp,
                JSON: JSON,
                Promise: Promise,
                Map: Map,
                Set: Set,
                WeakMap: WeakMap,
                WeakSet: WeakSet,
                Symbol: Symbol,
                Proxy: Proxy,
                Reflect: Reflect,
                Intl: Intl
            };

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
            const functionBody = `
                with (sandbox) {
                    ${code}
                }
            `;
            
            const func = new Function('sandbox', functionBody);
            await func(sandbox);

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (logs.length === 0) {
                this.logInfo('–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)');
            } else {
                logs.forEach(log => {
                    this.logMessage(log.type, ...log.args);
                });
            }

        } catch (error) {
            this.logError(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${language}: ${error.message}`);
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ console –º–µ—Ç–æ–¥—ã
            Object.assign(console, originalConsole);
        }
    }

    logMessage(type, ...args) {
        const message = args.map(arg => {
            if (typeof arg === 'object') {
                return JSON.stringify(arg, null, 2);
            }
            return String(arg);
        }).join(' ');

        const logElement = document.createElement('div');
        logElement.className = `log ${type}`;
        logElement.textContent = `[${type.toUpperCase()}] ${message}`;
        this.outputElement.appendChild(logElement);
        this.outputElement.scrollTop = this.outputElement.scrollHeight;
    }

    logError(message) {
        this.logMessage('error', message);
    }

    logInfo(message) {
        this.logMessage('info', message);
    }

    showLoading() {
        const loadingElement = document.createElement('div');
        loadingElement.className = 'log loading';
        loadingElement.textContent = '[–ó–ê–ì–†–£–ó–ö–ê] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
        loadingElement.id = 'loading-indicator';
        this.outputElement.appendChild(loadingElement);
        this.outputElement.scrollTop = this.outputElement.scrollHeight;
    }

    hideLoading() {
        const loadingElement = document.getElementById('loading-indicator');
        if (loadingElement) {
            loadingElement.remove();
        }
    }

    clearEditor() {
        this.editor.setValue('');
        this.editor.focus();
    }

    clearOutput() {
        this.outputElement.innerHTML = '';
    }

    loadDefaultCode() {
        this.loadTypeScriptExample();
    }

    loadTypeScriptExample() {
        const example = `// üöÄ JavaScript Universe - TypeScript + JavaScript —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
console.log('–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üëã');

// –†–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏
const arr: number[] = [1, 2, 3, 4, 5];
console.log('–ú–∞—Å—Å–∏–≤:', arr);

// –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
const str: string = 'Hello World';
console.log('–°—Ç—Ä–æ–∫–∞:', str);

// –†–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
const user: { name: string; age: number } = {
    name: '–ò–≤–∞–Ω',
    age: 25
};
console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);

// –†–∞–±–æ—Ç–∞ —Å —á–∏—Å–ª–∞–º–∏
const num: number = 3.14159;
console.log('–ß–∏—Å–ª–æ:', num);

// –†–∞–±–æ—Ç–∞ —Å –±—É–ª–µ–≤—ã–º–∏
const flag: boolean = true;
console.log('–§–ª–∞–≥:', flag);

// TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface User {
    id: number;
    name: string;
    email: string;
    age?: number;
}

// TypeScript –∫–ª–∞—Å—Å—ã
class UserService {
    private users: User[] = [];

    addUser(user: User): void {
        this.users.push(user);
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:', user);
    }

    getAllUsers(): User[] {
        return this.users;
    }
}

// TypeScript —Ç–∏–ø—ã
type Status = 'active' | 'inactive' | 'pending';
const userStatus: Status = 'active';

// –ü—Ä–∏–º–µ—Ä –æ—à–∏–±–∫–∏ TypeScript –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
interface IA {
    name: string;
}

const people: IA = {
    name: 1 // –û—à–∏–±–∫–∞: Type 'number' is not assignable to type 'string'
};

console.log(people);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function fetchData(): Promise<void> {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
        const data = await response.json();
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞
fetchData();
console.log('üéØ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userStatus);`;
        
        this.editor.setValue(example);
    }

    logErrorHeader(message) {
        const logElement = document.createElement('div');
        logElement.className = 'log error header';
        logElement.textContent = message;
        this.outputElement.appendChild(logElement);
        this.outputElement.scrollTop = this.outputElement.scrollHeight;
    }

    logErrorLocation(message) {
        const logElement = document.createElement('div');
        logElement.className = 'log error location';
        logElement.textContent = message;
        this.outputElement.appendChild(logElement);
        this.outputElement.scrollTop = this.outputElement.scrollHeight;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new CodePlayground();
}); 